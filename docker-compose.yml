services:
  php:
    build:
      context: ./php
      dockerfile: Dockerfile
    image: registry.cn-hangzhou.aliyuncs.com/kanin/php:1.0
    container_name: php
    restart: always
    ports:
      - "9000:9000"   # php-fpm 服务端口（内部供 nginx 反向代理调用）
      - "9501:9501"   # swoole 服务端口
      - "9502:9502"   # swoole 服务端口
      - "9503:9503"   # swoole 服务端口
    volumes:
      - ${SRC_PATH}:/var/www
    networks:
      - app-network

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: registry.cn-hangzhou.aliyuncs.com/kanin/nginx:1.0
    container_name: nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      - ${SRC_PATH}:/var/www
      - ./nginx/conf.d:/etc/nginx/conf.d
    networks:
      - app-network

  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    image: registry.cn-hangzhou.aliyuncs.com/kanin/redis:1.0
    container_name: redis
    restart: always
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - ${DATA_PATH}/redis:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf  # 挂载自定义的 redis.conf 文件
    networks:
      - app-network

  mongo:
    build:
      context: ./mongo
      dockerfile: Dockerfile
    image: registry.cn-hangzhou.aliyuncs.com/kanin/mongo:1.0
    container_name: mongo
    restart: always
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - ${DATA_PATH}/mongo:/data/db
    networks:
      - app-network

  mysql:
    build:
      context: ./mysql
      dockerfile: Dockerfile
    image: registry.cn-hangzhou.aliyuncs.com/kanin/mysql:1.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - ${DATA_PATH}/mysql:/var/lib/mysql
    networks:
      - app-network

  consul:
    build:
      context: ./consul
      dockerfile: Dockerfile
    image: registry.cn-hangzhou.aliyuncs.com/kanin/consul:1.0
    container_name: consul
    ports:
      - "${CONSUL_PORT}:8500"
      - "${CONSUL_UDP_PORT}:8600/udp"
    command: "agent -dev -client=0.0.0.0"
    networks:
      - app-network
  go:
    build:
      context: ./go   # 注意，这里是放 Dockerfile 的地方，不是你本地源码
      dockerfile: Dockerfile
    image: registry.cn-hangzhou.aliyuncs.com/kanin/go:1.0
    container_name: go
    ports:
      - "3001:3000"
    volumes:
      - ${GO_PATH}:/go
    networks:
      - app-network

  rabbitmq:
    build:
      context: ./rabbitmq  # 如果你使用上面的 Dockerfile
      dockerfile: Dockerfile
    image: registry.cn-hangzhou.aliyuncs.com/kanin/rabbitmq:3.13
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"      # RabbitMQ 服务端口
      - "15672:15672"    # Web 管理界面
      - "1883:1883"      # MQTT（可选）
      - "15675:15675"    # Web MQTT（可选）
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - ${DATA_PATH}/rabbitmq:/var/lib/rabbitmq
    networks:
      - app-network

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    ports:
      - "9100:9100"
    restart: unless-stopped
#    volumes:
#      - '/:/host:ro,rslave'
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus  # 挂载本地配置
      - ${DATA_PATH}/prometheus_data:/prometheus                   # 数据持久化
    restart: unless-stopped
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}       # 默认账号
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin123}   # 默认密码
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP:-false}    # 禁止新用户注册
      - GF_DEFAULT_LANGUAGE=zh-CN
    volumes:
      - ${DATA_PATH}/grafana-data:/var/lib/grafana
    # 只有需要完整自定义配置时才挂载 grafana.ini
    # - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
